# Це просте завдання приклад того як генератори використовуються для генерації елементів нескінченої послідовності.
#  Завдання реалізувати свій генератор випадкових чисел.
# - вибирається початкове значення X, що містить 6 цифр, можливо з нулями, що передують. Це так званий seed.
# - генероване число містить 6 знаків, можливо з нулями попереду;
# - поточне значення X розділяється на дві частини по три цифри які міняються місцями для отримання значення Y
#  (тобто, якщо X = 654321, то Y = 321654);
# - перемножаються X та Y, отримується 12-знакове число (можливо з передуючими нулями), наприклад 654321 * 321654 = 210464966934
# - вирізаються рівно з середини 6 цифр з цього довгого числа, це і є згенерований випадковий результат
#  (для нашого прикладу = 464966), який віддає генератор (повертати слід int в діапазоні від 0 до 999999, не відображати передуючі
#  нулі, які використовуються тільки при "обчисленнях"), він же використовується як початкове значення для обчислення наступного.
# Звичайно, це завдання слід реалізувати з використанням функцій-генераторів
# Test-case: seed = 654321
# 654321, 464966, 372900, 748718, 139565, 873624, 904049, 115661,  465222, 495612, 559871, 960608, 971847, 98072, 70795, 286980


import random


def generate():
    seed = str(random.randint(1, 999999))
    seed = seed.zfill(6)
    return seed


def divide_middle(seed):
    x_list = list(seed)
    for i in range(3):
        x_list.append(x_list.pop(0))
    return x_list


def multiply(x, y):
    return x * y


def rezult(x):
    y = "".join(divide_middle(x))
    mul = str(multiply(int(x), int(y)))
    mul = mul.zfill(12)
    list_mul = list(mul)
    list_mul = list_mul[3:-3]
    mul = int("".join(list_mul))
    return mul


# x = seed = generate()

seed = "654321"

print(seed)

y = "".join(divide_middle(seed))

mul = str(multiply(int(seed), int(y)))

mul = mul.zfill(12)

list_mul = list(mul)

list_mul = list_mul[3:-3]

mul = int("".join(list_mul))


for i in range(15):
    print(rezult(str(mul)))
    mul = rezult(str(mul))
